# 11:30~
# 점화식
    # ai = min(ai-1, ai/2, ai/3, ai/5) + 1
    # i번째 숫자를 만들기 위해 필요한 횟수 = (i-1을 만들기 위한 횟수, i/2를 만들기 위한 횟수, i/3를 만들기 위한 횟수, i/5를 만들기 위한 횟수) 중 최소 횟수 + 1

# 정수 X가 주어졌을 때 X를 1로 만들기 위해 필요한 연산의 최소 횟수
answer = 0
# 정수 X를 입력받기
x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
# x의 범위가 1~30000까지 이므로 30001 크기로 초기화
# 각 인덱스의 값이 의미하는 것은 1을 인덱스숫자로 만들기 위한 최소 횟수를 의미(bottom-up 방식으로 1에서 목표숫자로 거꾸로 접근)
d = [0] * 30001

# 다이나믹 프로그래밍 진행(Bottom-Up 방식)
# d[1] (1에서 1로 만들기 위해 필요한 연산 횟수) 이므로 아무 연산도 진행할 필요가 없기 때문에 d[1] = 0
# 그렇기 때문에 2부터 시작해서 만들어야 하는 목표 숫자까지 진행
for i in range(2, x+1):
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i-1] + 1

    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        # d // 2 : 현재 수 i에 2를 곱하기 전 숫자까지의 최소 횟수에 + 1 : 현재 숫자가 되기 위해 2를 곱해주었기 때문에 1이 더해짐
        # 현재의 수에서 1을 더하는 경우의 최소 횟수보다 2를 곱했을 때의 횟수가 더 적은 횟수이면 최소 횟수 갱신
        d[i] = min(d[i], d[i // 2] + 1) #
        print("2:",d[i])
    # 현재의 수가 3로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
        print("3:", d[i])
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)
        print("5:", d[i])

# 1에서 X를 만들기 위한 최소 횟수(X에서 1을 만들기 위한 최소 횟수) 출력
print(d[x])
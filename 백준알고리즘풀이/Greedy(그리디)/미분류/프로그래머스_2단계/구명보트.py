# 9:18~9:48/9:48~ - 틀림 - 정확도는 맞았지만 효율성에서 시간초과
# people(1~50,000)
# 몸무게(40~240)
# 구명보트
    # 한번에 최대 2명
    # 무게제한(40~240)
# answer : 구명보트를 최대한 적게 사용해 모든 사람 구출
# 그리디 : 가장 몸무게가 많은 사람과 가장 몸무게가 적은 사람을 매칭하기
# ===================================================================
# 최적화 코드 - 투포인터 방식으로 구현
def solution(people, limit):
    # 사람 몸무게 정렬
    people.sort()
    # 중요 - 투포인터 - 시작점(사람 배열의 시작 인덱스)
    start = 0
    # 중요 - 투포인터 - 끝점(사람 배열의 마지막 인덱스)
    end = len(people) - 1
    # 얼마나 매칭됐는지 카운트
    match = 0
    # 중요 - 시각점이 끝점보다 작을 때까지 반복하면서
    while start < end:
        # 만약 start에 해당하는 값 + end에 해당하는 값이 limit보다 작거나 같다면
        if people[start] + people[end] <= limit:
            # 매칭 카운트
            match += 1
            # 시각점 증가
            start += 1
            # 끝점 감소
            end -= 1
        else:
            # 매칭안된 경우는 끝점만 감소
                # 무겁기 때문에 태울 수 없기 때문에 무게를 감소하는 쪽으로 이동시켜야 되기 때문
            end -= 1

    # 중요 - 전체 사람수에서 매칭된 사람 수 빼기
    answer = len(people) - match

    return answer